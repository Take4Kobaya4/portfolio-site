{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useReducer } from \"react\";\nimport axios from 'axios';\nimport { skillReducer, initialState, actionTypes } from '../reducers/skillReducer';\nexport const useSkills = () => {\n  _s();\n\n  const [state, dispatch] = useReducer(skillReducer, initialState);\n  useEffect(() => {\n    dispatch({\n      type: actionTypes.fetch\n    });\n    axios.get('https://api.github.com/users/Take4Kobaya4/repos').then(response => {\n      const languageList = response.data.map(res => res.language);\n      const countedLanguageList = generateLanguageCountObj(languageList);\n      dispatch({\n        type: actionTypes.success,\n        payload: {\n          languageList: countedLanguageList\n        }\n      });\n    }).catch(() => {\n      dispatch({\n        type: actionTypes.error\n      });\n    });\n  }, []);\n\n  const generateLanguageCountObj = allLanguageList => {\n    const notNullLanguageList = allLanguageList.filter(language => language != null);\n    const uniqueLanguageList = [...new Set(notNullLanguageList)];\n    return uniqueLanguageList.map(item => {\n      return {\n        language: item,\n        count: allLanguageList.filter(language => language === item).length\n      };\n    });\n  };\n\n  const converseCountToPercentage = count => {\n    if (count > 10) {\n      return 100;\n    }\n\n    return count * 10;\n  };\n\n  const sortedLanguageList = () => state.languageList.sort((firstLang, nextLang) => nextLang.count - firstLang.count);\n\n  return [sortedLanguageList, state.requestState, converseCountToPercentage];\n};\n\n_s(useSkills, \"bgCdjuTOmPdSBRwTap80EFd9Y3U=\");","map":{"version":3,"sources":["/Users/take/Desktop/product-1/react-portfolio-site/src/customHooks/useSkills.js"],"names":["useEffect","useReducer","axios","skillReducer","initialState","actionTypes","useSkills","state","dispatch","type","fetch","get","then","response","languageList","data","map","res","language","countedLanguageList","generateLanguageCountObj","success","payload","catch","error","allLanguageList","notNullLanguageList","filter","uniqueLanguageList","Set","item","count","length","converseCountToPercentage","sortedLanguageList","sort","firstLang","nextLang","requestState"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,UAApB,QAAsC,OAAtC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SAAQC,YAAR,EAAsBC,YAAtB,EAAoCC,WAApC,QAAuD,0BAAvD;AAEA,OAAO,MAAMC,SAAS,GAAG,MAAM;AAAA;;AAC7B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,UAAU,CAACE,YAAD,EAAeC,YAAf,CAApC;AAEAJ,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEJ,WAAW,CAACK;AAApB,KAAD,CAAR;AACAR,IAAAA,KAAK,CAACS,GAAN,CAAU,iDAAV,EACCC,IADD,CACOC,QAAD,IAAc;AAClB,YAAMC,YAAY,GAAGD,QAAQ,CAACE,IAAT,CAAcC,GAAd,CAAkBC,GAAG,IAAIA,GAAG,CAACC,QAA7B,CAArB;AACA,YAAMC,mBAAmB,GAAGC,wBAAwB,CAACN,YAAD,CAApD;AACAN,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,IAAI,EAAEJ,WAAW,CAACgB,OAApB;AAA6BC,QAAAA,OAAO,EAAE;AAACR,UAAAA,YAAY,EAAEK;AAAf;AAAtC,OAAD,CAAR;AACD,KALD,EAMCI,KAND,CAMO,MAAM;AACXf,MAAAA,QAAQ,CAAC;AAACC,QAAAA,IAAI,EAAGJ,WAAW,CAACmB;AAApB,OAAD,CAAR;AACD,KARD;AASD,GAXQ,EAWN,EAXM,CAAT;;AAaA,QAAMJ,wBAAwB,GAAIK,eAAD,IAAqB;AACpD,UAAMC,mBAAmB,GAAGD,eAAe,CAACE,MAAhB,CAAuBT,QAAQ,IAAIA,QAAQ,IAAI,IAA/C,CAA5B;AACA,UAAMU,kBAAkB,GAAG,CAAC,GAAG,IAAIC,GAAJ,CAAQH,mBAAR,CAAJ,CAA3B;AAEA,WAAOE,kBAAkB,CAACZ,GAAnB,CAAuBc,IAAI,IAAI;AACpC,aAAO;AACLZ,QAAAA,QAAQ,EAAEY,IADL;AAELC,QAAAA,KAAK,EAAEN,eAAe,CAACE,MAAhB,CAAuBT,QAAQ,IAAIA,QAAQ,KAAKY,IAAhD,EAAsDE;AAFxD,OAAP;AAID,KALM,CAAP;AAMD,GAVD;;AAYA,QAAMC,yBAAyB,GAAIF,KAAD,IAAW;AAC3C,QAAIA,KAAK,GAAG,EAAZ,EAAgB;AAAC,aAAO,GAAP;AAAY;;AAC7B,WAAOA,KAAK,GAAG,EAAf;AACD,GAHD;;AAKA,QAAMG,kBAAkB,GAAG,MACzB3B,KAAK,CAACO,YAAN,CAAmBqB,IAAnB,CAAwB,CAACC,SAAD,EAAYC,QAAZ,KAAyBA,QAAQ,CAACN,KAAT,GAAiBK,SAAS,CAACL,KAA5E,CADF;;AAIA,SAAO,CAACG,kBAAD,EAAqB3B,KAAK,CAAC+B,YAA3B,EAAyCL,yBAAzC,CAAP;AACD,CAtCM;;GAAM3B,S","sourcesContent":["import { useEffect, useReducer } from \"react\";\nimport axios from 'axios';\n\nimport {skillReducer, initialState, actionTypes } from '../reducers/skillReducer';\n\nexport const useSkills = () => {\n  const [state, dispatch] = useReducer(skillReducer, initialState);\n\n  useEffect(() => {\n    dispatch({ type: actionTypes.fetch});\n    axios.get('https://api.github.com/users/Take4Kobaya4/repos')\n    .then((response) => {\n      const languageList = response.data.map(res => res.language)\n      const countedLanguageList = generateLanguageCountObj(languageList)\n      dispatch({ type: actionTypes.success, payload: {languageList: countedLanguageList}})\n    })\n    .catch(() => {\n      dispatch({type : actionTypes.error});\n    });\n  }, []);\n\n  const generateLanguageCountObj = (allLanguageList) => {\n    const notNullLanguageList = allLanguageList.filter(language => language != null);\n    const uniqueLanguageList = [...new Set(notNullLanguageList)]\n\n    return uniqueLanguageList.map(item => {\n      return {\n        language: item,\n        count: allLanguageList.filter(language => language === item).length\n      }\n    });\n  };\n\n  const converseCountToPercentage = (count) => {\n    if (count > 10) {return 100;}\n    return count * 10;\n  };\n\n  const sortedLanguageList = () => (\n    state.languageList.sort((firstLang, nextLang) => nextLang.count - firstLang.count)\n  )\n\n  return [sortedLanguageList, state.requestState, converseCountToPercentage];\n}\n"]},"metadata":{},"sourceType":"module"}